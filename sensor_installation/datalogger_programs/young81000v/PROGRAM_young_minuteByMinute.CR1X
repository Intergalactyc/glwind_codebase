''' PROGRAM_young_20HzFFSampler.CR1X '''
' Author:       Elliott Walker
' Last update:  July 3, 2024
' Description:  `Full-function' sampler - Takes input @ 20 Hz from the Young 81000V,
'               parses data string, handles errors, records status.
' Usage:        Program to directly run in CR1000X datalogger with RS-232 wiring (@ComC5) to Young 81000V
' Dependencies: young_config.CR1X (expected in CPU)

' external code
Include("CPU:young_config.CR1X")

' declare hidden variables
Public RawData As String * 256
Dim NBytes

' declare public variables
Public Active As Boolean
Public WData(6)
Alias WData(1) = UWind : Units UWind = m/s
Alias WData(2) = VWind : Units VWind = m/s
Alias WData(3) = WWind : Units WWind = m/s
Alias WData(4) = SpeedOfSound : Units SpeedOfSound = m/s
Alias WData(5) = SonicTemp : Units SonicTemp = Deg C
Alias WData(6) = ErrCode
Public GoodSample
Public BattV : Units BattV = V
Public PTemp : Units PTemp = Deg C

Dim ChkSum As String * 2

' baud rate for the 81000V per the manual
Const BaudRate = -38400

' serial output string format
Const FormatString = "5ABEC" ' UVW, speed of sound, sonic temp, checksum, error code
Const OutputLength = 43      ' 5ABCE takes 21+7+8+3+4=43 bytes

' measurement frequency
Const Frequency = 20

' main data table: 20Hz data collection
DataTable (TenMinute, True, -1)
    DataInterval (0, 1000/Frequency, msec, 10)
    Average (1, EddyFluxU, IEEE4)
    Average (1, EddyFluxV, IEEE4)
    Sample (1, EddyFluxT, IEEE4)
    Average (1, SpeedOfSound, IEEE4)
    Average (1, SonicTemp, FP2)
    Totalize (1, GoodSample, Long, False)
EndTable

' status data table: every 10 minutes, confirm activity and check in on battery + panel temp
DataTable (DeviceStatus, True, -1)
    DataInterval (0, 10, min, 10)
    Sample (1, Active, Boolean)
    Sample (1, PTemp, FP2)
    Sample (1, BattV, FP2)
EndTable

' daily data table: daily report of minimum battery voltage and max/min temps (+times)
DataTable (Daily, True, -1)
    DataInterval (0, 1, day, 10)
    Minimum (1, BattV, FP2, False, False)
    Maximum (1, SonicTemp, FP2, SonicTemp = NAN, True)
    Minimum (1, SonicTemp, FP2, SonicTemp = NAN, True)
EndTable

' main program
BeginProg
    ' open serial port for communication with sensor
    SerialOpen(ComC5, BaudRate, 0, 0, 10000, 0)
    
    ' modify settings
    Call ChangeFormat(ComC5, FormatString)
    Call ChangeFrequency(ComC5, Frequency)
    
    ' main scan
    Scan (1000/Frequency, msec, 0, 0)
        ' take in data (most recent record)
        SerialInRecord (ComC5, RawData, 0, 43, &h0D, NBytes, 01)
        
        ' serial activity check in
        Active = ComPortIsActive(ComC5)
        
        ' split raw data string
        SplitStr(WData(), RawData, " ", 6, 6)
        ChkSum = Right(RawData, 2)
        
        ' check for errors (nonzero error code or checksum mismatch)
        If ErrCode <> 0 Then
            GoodSample = 0
        ElseIf Hex(CheckSum(RawData, 9, Len(RawData)-3)) <> ChkSum Then
            GoodSample = 0
        Else
            GoodSample = 1
        EndIf
        
        ' read battery boltage and logger panel temperature
        Battery(BattV)
        PanelTemp(PTemp,60)
        
        ' store data in tables
        CallTable OneMinute
        CallTable DeviceStatus
        CallTable Daily
        
    NextScan
    
EndProg

