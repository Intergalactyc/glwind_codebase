' Program: HygroCS320Young
' Author: Chloe Amoroso, Elliot Walker
' Last Update: July 18, 2024
' Description: This program is designed for a Campbell Scientific CR1000X 
'  data logger. It handles data collection from an RM Young 81000V Ultrasonic 
'  Anemometer, HygroVUE10 Digital Temperature & Relative Humidity Sensor, 
'  and a CS320 Digital Thermopile Pyranometer, including various other 
'  environmental sensors. The program sets up multiple data tables to record 
'  wind, temperature, humidity, solar radiation, and system status data at 
'  specified intervals.
' Usage: Program to directly run in CR1000X datalogger with RS-232 wiring 
'  @ComC5) to Young 81000V and SDI-12 wiring (@ComC1 with CS320 address@1 and 
'  HygroVUE10 address@0)
' Dependencies: young_config.CR1X (expected in CPU). CS320 must have address@1
'  and HygroVUE10 must have address@0 (may need to use codes CS320_Address1.CR1X
'  and Htgro_Address0.CR1X)
' Wiring Configurations:
' 	CS320: [Red = 12V], [White = C1], [Clear, Blue, Black = G]
'  	HygroVUE10: [Brown = 12V], [White = C1], [Clear, Black = G]
'	  Young: [Red = 12V], [Blue, Black = G], [Orange = C5], [Yellow = C6], [Brown, Green, White = NOT CONNECTED] 

' external code
Include("CPU:young_config.CR1X")

' declare hidden variables
Public RawData As String * 256
Dim NBytes

' declare public variables
Public Active As Boolean
Public WData(6)
Alias WData(1) = UWind : Units UWind = m/s
Alias WData(2) = VWind : Units VWind = m/s
Alias WData(3) = WWind : Units WWind = m/s
Alias WData(4) = SpeedOfSound : Units SpeedOfSound = m/s
Alias WData(5) = SonicTemp : Units SonicTemp = Deg C
Alias WData(6) = ErrCode
Public GoodSample
Public BattV : Units BattV = V
Public PTemp : Units PTemp = Deg C

Dim ChkSum As String * 2

' baud rate for the 81000V per the manual
Const BaudRate = -38400

' serial output string format
Const FormatString = "5ABEC" ' UVW, speed of sound, sonic temp, checksum, error code
Const OutputLength = 43      ' 5ABCE takes 21+7+8+3+4=43 bytes

' measurement frequency
Const Frequency = 20

' main data table: 20Hz data collection
DataTable (RapidAnemometerData, True, -1)
    DataInterval (0, 1000/Frequency, msec, 10)
    Sample (1, UWind, IEEE4)
    Sample (1, VWind, IEEE4)
    Sample (1, WWind, IEEE4)
    Sample (1, SpeedOfSound, IEEE4)
    Sample (1, SonicTemp, FP2)
    Sample (1, GoodSample, Boolean)
EndTable

' status data table: every 10 minutes, confirm activity and check in on battery + panel temp
DataTable (DeviceStatus, True, -1)
    DataInterval (0, 10, min, 10)
    Sample (1, Active, Boolean)
    Sample (1, PTemp, FP2)
    Sample (1, BattV, FP2)
EndTable

' daily data table: daily report of minimum battery voltage and max/min temps (+times)
DataTable (Daily, True, -1)
    DataInterval (0, 1, day, 10)
    Minimum (1, BattV, FP2, False, False)
    Maximum (1, SonicTemp, FP2, SonicTemp = NAN, True)
    Minimum (1, SonicTemp, FP2, SonicTemp = NAN, True)
EndTable

'CR1000X Series
'Created by Short Cut (4.5)

'Declare Variables and Units
Dim AirDewDif
Dim Htr
Public PTemp_C
Public TRHData(2)
Public CS320(6)
Public SlrMJ
Public DewPtC
Public HtrCtrl As Boolean

Alias TRHData(1)=AirTC
Alias TRHData(2)=RH
Alias CS320(1)=SlrW
Alias CS320(2)=Raw_mV
Alias CS320(3)=CS320_Temp
Alias CS320(4)=CS320_X
Alias CS320(5)=CS320_Y
Alias CS320(6)=CS320_Z

Units PTemp_C=Deg C
Units SlrMJ=MJ/m^2
Units DewPtC=Deg C
Units AirTC=Deg C
Units RH=%
Units SlrW=W/m^2
Units Raw_mV=mV
Units CS320_Temp=Deg C
Units CS320_X=degrees
Units CS320_Y=degrees
Units CS320_Z=degrees

'Define Data Tables
DataTable(Output,True,-1)
    DataInterval(0,10,Sec,10)
    Sample(1,BattV,FP2)
    Sample(1,PTemp_C,FP2)
    Sample(1,AirTC,FP2)
    Sample(1,RH,FP2)
    Sample(1,SlrW,FP2)
    Sample(1,Raw_mV,FP2)
    Sample(1,CS320_Temp,FP2)
    Sample(1,CS320_X,FP2)
    Sample(1,CS320_Y,FP2)
    Sample(1,CS320_Z,FP2)
    Totalize(1,SlrMJ,IEEE4,False)
    Sample(1,DewPtC,FP2)
EndTable

' main program
BeginProg
    ' open serial port for communication with sensor
    SerialOpen(ComC5, BaudRate, 0, 0, 10000, 0)
    
    ' modify settings
    Call ChangeFormat(ComC5, FormatString)
    Call ChangeFrequency(ComC5, Frequency)

    ' main scan for 20Hz sampling
    Scan (1000/Frequency, msec, 1, 0)
        ' take in data (most recent record)
        SerialInRecord (ComC5, RawData, 0, OutputLength, &h0D, NBytes, 01)
        
        ' serial activity check in
        Active = ComPortIsActive(ComC5)
        
        ' split raw data string
        SplitStr(WData(), RawData, " ", 6, 6)
        ChkSum = Right(RawData, 2)
        
        ' check for errors (nonzero error code or checksum mismatch)
        If ErrCode <> 0 Then
            GoodSample = 0
        ElseIf Hex(CheckSum(RawData, 9, Len(RawData)-3)) <> ChkSum Then
            GoodSample = 0
        Else
            GoodSample = -1
        EndIf
        
        ' store data in tables
        CallTable RapidAnemometerData
    NextScan

    ' secondary scan for other sensors
    SlowSequence
        Scan(10,Sec,2,0)
            'Default CR1000X Datalogger Battery Voltage measurement 'BattV'
            Battery(BattV)
            'Default CR1000X Datalogger Wiring Panel Temperature measurement 'PTemp_C'
            PanelTemp(PTemp_C,60)
            'HygroVUE5/HygroVUE10 Digital Temperature & Relative Humidity Sensor measurements 'AirTC' and 'RH'
            SDI12Recorder(TRHData(),C1,"0","M!",1,0,-1)
            'CS320 Digital Thermopile Pyranometer (SN<=3505) measurements 'SlrW', 'Raw_mV', 'CS320_Temp', 'CS320_X', 'CS320_Y', and 'CS320_Z'
            SDI12Recorder(CS320(),C1,"1","M4!",1,0,-1)
            'Calculate total flux
            'The multiplier to calculate total flux was calculated by Short Cut
            'and based on a program execution rate (scan rate) of 10 Seconds.
            'If you change the program execution rate outside of Short Cut with the CRBasic Editor
            'you will need to recalculate this multiplier. See the sensor manual for more details.
            SlrMJ=SlrW*1E-05
            'CS320 Digital Thermopile Pyranometer heater control
            'Dew point calculation 'DewPtC'
            DewPoint(DewPtC,AirTC,RH)
            'Calculate the difference 'AirDewDif' between the CS320 temperature and dewpoint
            AirDewDif=CS320_Temp-DewPtC
            'If the CS320 temperature or the difference between the CS320 temperature and dew point are less than 2 degrees C, turn the CS320 heater on
            If CS320_Temp < 2 OR AirDewDif < 2 Then HtrCtrl = True
            'If the CS320 temperature and the difference between the CS320 temperature and dew point are greater than 3 degrees C, turn the CS320 heater off
            If CS320_Temp > 3 AND AirDewDif > 3 Then HtrCtrl = False
            'Always turn the CS320 heater off if the datalogger battery voltage is less than 11.7 volts
            If BattV < 11.7 Then HtrCtrl = False
            'Issue the appropriate SDI-12 command to turn the CS320 heater on or off depending on the state of the 'HtrCtrl' variable
            If HtrCtrl = True Then
                SDI12Recorder(Htr,C1,"1","XHON!",1,0)
            Else
                SDI12Recorder(Htr,C1,"1","XHOFF!",1,0)
            EndIf
            'Call Data Tables and Store Data
            CallTable Output
            'Call additional tables
            CallTable DeviceStatus
            CallTable Daily
        NextScan
    EndSequence
EndProg

